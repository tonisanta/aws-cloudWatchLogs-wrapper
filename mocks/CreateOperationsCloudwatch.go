// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudwatchlogs "github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"

	mock "github.com/stretchr/testify/mock"
)

// CreateOperationsCloudwatch is an autogenerated mock type for the CreateOperationsCloudwatch type
type CreateOperationsCloudwatch struct {
	mock.Mock
}

type CreateOperationsCloudwatch_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateOperationsCloudwatch) EXPECT() *CreateOperationsCloudwatch_Expecter {
	return &CreateOperationsCloudwatch_Expecter{mock: &_m.Mock}
}

// CreateLogGroup provides a mock function with given fields: ctx, params, optFns
func (_m *CreateOperationsCloudwatch) CreateLogGroup(ctx context.Context, params *cloudwatchlogs.CreateLogGroupInput, optFns ...func(*cloudwatchlogs.Options)) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateLogGroupOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...func(*cloudwatchlogs.Options)) *cloudwatchlogs.CreateLogGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...func(*cloudwatchlogs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOperationsCloudwatch_CreateLogGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogGroup'
type CreateOperationsCloudwatch_CreateLogGroup_Call struct {
	*mock.Call
}

// CreateLogGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudwatchlogs.CreateLogGroupInput
//   - optFns ...func(*cloudwatchlogs.Options)
func (_e *CreateOperationsCloudwatch_Expecter) CreateLogGroup(ctx interface{}, params interface{}, optFns ...interface{}) *CreateOperationsCloudwatch_CreateLogGroup_Call {
	return &CreateOperationsCloudwatch_CreateLogGroup_Call{Call: _e.mock.On("CreateLogGroup",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *CreateOperationsCloudwatch_CreateLogGroup_Call) Run(run func(ctx context.Context, params *cloudwatchlogs.CreateLogGroupInput, optFns ...func(*cloudwatchlogs.Options))) *CreateOperationsCloudwatch_CreateLogGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudwatchlogs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudwatchlogs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.CreateLogGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *CreateOperationsCloudwatch_CreateLogGroup_Call) Return(_a0 *cloudwatchlogs.CreateLogGroupOutput, _a1 error) *CreateOperationsCloudwatch_CreateLogGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateLogStream provides a mock function with given fields: ctx, params, optFns
func (_m *CreateOperationsCloudwatch) CreateLogStream(ctx context.Context, params *cloudwatchlogs.CreateLogStreamInput, optFns ...func(*cloudwatchlogs.Options)) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateLogStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...func(*cloudwatchlogs.Options)) *cloudwatchlogs.CreateLogStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...func(*cloudwatchlogs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOperationsCloudwatch_CreateLogStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogStream'
type CreateOperationsCloudwatch_CreateLogStream_Call struct {
	*mock.Call
}

// CreateLogStream is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudwatchlogs.CreateLogStreamInput
//   - optFns ...func(*cloudwatchlogs.Options)
func (_e *CreateOperationsCloudwatch_Expecter) CreateLogStream(ctx interface{}, params interface{}, optFns ...interface{}) *CreateOperationsCloudwatch_CreateLogStream_Call {
	return &CreateOperationsCloudwatch_CreateLogStream_Call{Call: _e.mock.On("CreateLogStream",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *CreateOperationsCloudwatch_CreateLogStream_Call) Run(run func(ctx context.Context, params *cloudwatchlogs.CreateLogStreamInput, optFns ...func(*cloudwatchlogs.Options))) *CreateOperationsCloudwatch_CreateLogStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudwatchlogs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudwatchlogs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.CreateLogStreamInput), variadicArgs...)
	})
	return _c
}

func (_c *CreateOperationsCloudwatch_CreateLogStream_Call) Return(_a0 *cloudwatchlogs.CreateLogStreamOutput, _a1 error) *CreateOperationsCloudwatch_CreateLogStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutLogEvents provides a mock function with given fields: ctx, params, optFns
func (_m *CreateOperationsCloudwatch) PutLogEvents(ctx context.Context, params *cloudwatchlogs.PutLogEventsInput, optFns ...func(*cloudwatchlogs.Options)) (*cloudwatchlogs.PutLogEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutLogEventsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...func(*cloudwatchlogs.Options)) *cloudwatchlogs.PutLogEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutLogEventsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...func(*cloudwatchlogs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOperationsCloudwatch_PutLogEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutLogEvents'
type CreateOperationsCloudwatch_PutLogEvents_Call struct {
	*mock.Call
}

// PutLogEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudwatchlogs.PutLogEventsInput
//   - optFns ...func(*cloudwatchlogs.Options)
func (_e *CreateOperationsCloudwatch_Expecter) PutLogEvents(ctx interface{}, params interface{}, optFns ...interface{}) *CreateOperationsCloudwatch_PutLogEvents_Call {
	return &CreateOperationsCloudwatch_PutLogEvents_Call{Call: _e.mock.On("PutLogEvents",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *CreateOperationsCloudwatch_PutLogEvents_Call) Run(run func(ctx context.Context, params *cloudwatchlogs.PutLogEventsInput, optFns ...func(*cloudwatchlogs.Options))) *CreateOperationsCloudwatch_PutLogEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudwatchlogs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudwatchlogs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutLogEventsInput), variadicArgs...)
	})
	return _c
}

func (_c *CreateOperationsCloudwatch_PutLogEvents_Call) Return(_a0 *cloudwatchlogs.PutLogEventsOutput, _a1 error) *CreateOperationsCloudwatch_PutLogEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PutRetentionPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *CreateOperationsCloudwatch) PutRetentionPolicy(ctx context.Context, params *cloudwatchlogs.PutRetentionPolicyInput, optFns ...func(*cloudwatchlogs.Options)) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutRetentionPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...func(*cloudwatchlogs.Options)) *cloudwatchlogs.PutRetentionPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutRetentionPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...func(*cloudwatchlogs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOperationsCloudwatch_PutRetentionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRetentionPolicy'
type CreateOperationsCloudwatch_PutRetentionPolicy_Call struct {
	*mock.Call
}

// PutRetentionPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - params *cloudwatchlogs.PutRetentionPolicyInput
//   - optFns ...func(*cloudwatchlogs.Options)
func (_e *CreateOperationsCloudwatch_Expecter) PutRetentionPolicy(ctx interface{}, params interface{}, optFns ...interface{}) *CreateOperationsCloudwatch_PutRetentionPolicy_Call {
	return &CreateOperationsCloudwatch_PutRetentionPolicy_Call{Call: _e.mock.On("PutRetentionPolicy",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *CreateOperationsCloudwatch_PutRetentionPolicy_Call) Run(run func(ctx context.Context, params *cloudwatchlogs.PutRetentionPolicyInput, optFns ...func(*cloudwatchlogs.Options))) *CreateOperationsCloudwatch_PutRetentionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*cloudwatchlogs.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*cloudwatchlogs.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutRetentionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *CreateOperationsCloudwatch_PutRetentionPolicy_Call) Return(_a0 *cloudwatchlogs.PutRetentionPolicyOutput, _a1 error) *CreateOperationsCloudwatch_PutRetentionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCreateOperationsCloudwatch interface {
	mock.TestingT
	Cleanup(func())
}

// NewCreateOperationsCloudwatch creates a new instance of CreateOperationsCloudwatch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCreateOperationsCloudwatch(t mockConstructorTestingTNewCreateOperationsCloudwatch) *CreateOperationsCloudwatch {
	mock := &CreateOperationsCloudwatch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
